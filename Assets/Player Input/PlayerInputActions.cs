//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Default Controls"",
            ""id"": ""78cb8385-15cf-4a77-9bdc-d3c4c6b8ca46"",
            ""actions"": [
                {
                    ""name"": ""Pick Structure"",
                    ""type"": ""Button"",
                    ""id"": ""c49dbca6-541e-4d6e-9518-3cb4ba26ec48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""dd69b364-8546-4a05-82f6-5bc8c5a0539b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""86050476-2a1d-44c0-8ded-f36592e7a82d"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick Structure"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c3eda2fa-8d62-4572-b6e2-4f08eab30242"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick Structure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8b49c0c9-58b6-4967-930f-16a35ccc4262"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick Structure"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b921ba43-5ddb-4f26-ac88-83358cf2a250"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Construction Controls"",
            ""id"": ""add89bcc-454f-4370-a07c-e3238b334ddf"",
            ""actions"": [
                {
                    ""name"": ""Rotate Ghost"",
                    ""type"": ""Button"",
                    ""id"": ""c4921403-e006-44a3-8cd9-3230593a8278"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Place Ghost"",
                    ""type"": ""Button"",
                    ""id"": ""b335af96-48cd-4d1d-9e69-133f20b74084"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete Ghost"",
                    ""type"": ""Button"",
                    ""id"": ""35364b0e-2cfd-41f7-8bbc-4344687c649f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit Construction Mode"",
                    ""type"": ""Button"",
                    ""id"": ""27deb085-3ce8-4fb6-82ef-84f725bc82e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49853261-70eb-40b4-92a7-d8f2b6b044cb"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Ghost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6bb2177-17f6-4533-a159-f1229dc3a1ce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Place Ghost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60680741-a13f-4981-adc7-fedef4856ab1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete Ghost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e2492f8-f646-4af6-844a-120481ccea2a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Construction Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera Controls"",
            ""id"": ""53f65ddb-9ea1-43b4-bcb1-3e8ac133ddcb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""60dce67f-8746-4f3b-9ad2-373fb98290c0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""56337558-7f91-4522-b2a6-9568feaaa3ae"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1),Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""688dd8ce-aba1-4a02-8f3b-84a6f4ea7248"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Double Touch Slide [Touch]"",
                    ""id"": ""132453fe-0acd-45b1-afa2-21621404c07f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5e3ce914-6eac-4b6d-b181-890fe273a43f"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ceb05556-a7a3-4244-88be-bd43e5faf1fd"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a95cb8af-0169-4477-91a0-7295ffc9c9ee"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb38617f-e643-4607-8ee6-9c2c338be990"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eb59a2af-3df5-4313-b6db-07ccb918a041"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eb62429c-0a5c-4b2b-98d8-a53c69ac67fd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab5d9e96-4bc1-400c-bf0a-a5c8329e4340"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""17e1be79-46d0-4eae-808c-d3686580ebd4"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Controls"",
            ""id"": ""5be7f4d8-76a5-4849-8dd0-0d49f29dc029"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""74b7f3c7-3760-4e97-b678-ed9ec4aa9f96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0f84f636-a42d-483a-b046-833d75700c1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ca38522-9887-4df8-bf08-505f226e0983"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6d58b8f-a001-417a-a6e2-c8eaf7e7ef82"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92d8a17b-a735-4509-a008-123e6006d3ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3966d24-6787-4879-a755-b89091093aea"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Default Controls
        m_DefaultControls = asset.FindActionMap("Default Controls", throwIfNotFound: true);
        m_DefaultControls_PickStructure = m_DefaultControls.FindAction("Pick Structure", throwIfNotFound: true);
        m_DefaultControls_Select = m_DefaultControls.FindAction("Select", throwIfNotFound: true);
        // Construction Controls
        m_ConstructionControls = asset.FindActionMap("Construction Controls", throwIfNotFound: true);
        m_ConstructionControls_RotateGhost = m_ConstructionControls.FindAction("Rotate Ghost", throwIfNotFound: true);
        m_ConstructionControls_PlaceGhost = m_ConstructionControls.FindAction("Place Ghost", throwIfNotFound: true);
        m_ConstructionControls_DeleteGhost = m_ConstructionControls.FindAction("Delete Ghost", throwIfNotFound: true);
        m_ConstructionControls_ExitConstructionMode = m_ConstructionControls.FindAction("Exit Construction Mode", throwIfNotFound: true);
        // Camera Controls
        m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
        m_CameraControls_Move = m_CameraControls.FindAction("Move", throwIfNotFound: true);
        m_CameraControls_Zoom = m_CameraControls.FindAction("Zoom", throwIfNotFound: true);
        // UI Controls
        m_UIControls = asset.FindActionMap("UI Controls", throwIfNotFound: true);
        m_UIControls_Click = m_UIControls.FindAction("Click", throwIfNotFound: true);
        m_UIControls_Point = m_UIControls.FindAction("Point", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default Controls
    private readonly InputActionMap m_DefaultControls;
    private List<IDefaultControlsActions> m_DefaultControlsActionsCallbackInterfaces = new List<IDefaultControlsActions>();
    private readonly InputAction m_DefaultControls_PickStructure;
    private readonly InputAction m_DefaultControls_Select;
    public struct DefaultControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public DefaultControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickStructure => m_Wrapper.m_DefaultControls_PickStructure;
        public InputAction @Select => m_Wrapper.m_DefaultControls_Select;
        public InputActionMap Get() { return m_Wrapper.m_DefaultControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultControlsActionsCallbackInterfaces.Add(instance);
            @PickStructure.started += instance.OnPickStructure;
            @PickStructure.performed += instance.OnPickStructure;
            @PickStructure.canceled += instance.OnPickStructure;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(IDefaultControlsActions instance)
        {
            @PickStructure.started -= instance.OnPickStructure;
            @PickStructure.performed -= instance.OnPickStructure;
            @PickStructure.canceled -= instance.OnPickStructure;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(IDefaultControlsActions instance)
        {
            if (m_Wrapper.m_DefaultControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultControlsActions @DefaultControls => new DefaultControlsActions(this);

    // Construction Controls
    private readonly InputActionMap m_ConstructionControls;
    private List<IConstructionControlsActions> m_ConstructionControlsActionsCallbackInterfaces = new List<IConstructionControlsActions>();
    private readonly InputAction m_ConstructionControls_RotateGhost;
    private readonly InputAction m_ConstructionControls_PlaceGhost;
    private readonly InputAction m_ConstructionControls_DeleteGhost;
    private readonly InputAction m_ConstructionControls_ExitConstructionMode;
    public struct ConstructionControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public ConstructionControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateGhost => m_Wrapper.m_ConstructionControls_RotateGhost;
        public InputAction @PlaceGhost => m_Wrapper.m_ConstructionControls_PlaceGhost;
        public InputAction @DeleteGhost => m_Wrapper.m_ConstructionControls_DeleteGhost;
        public InputAction @ExitConstructionMode => m_Wrapper.m_ConstructionControls_ExitConstructionMode;
        public InputActionMap Get() { return m_Wrapper.m_ConstructionControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ConstructionControlsActions set) { return set.Get(); }
        public void AddCallbacks(IConstructionControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ConstructionControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ConstructionControlsActionsCallbackInterfaces.Add(instance);
            @RotateGhost.started += instance.OnRotateGhost;
            @RotateGhost.performed += instance.OnRotateGhost;
            @RotateGhost.canceled += instance.OnRotateGhost;
            @PlaceGhost.started += instance.OnPlaceGhost;
            @PlaceGhost.performed += instance.OnPlaceGhost;
            @PlaceGhost.canceled += instance.OnPlaceGhost;
            @DeleteGhost.started += instance.OnDeleteGhost;
            @DeleteGhost.performed += instance.OnDeleteGhost;
            @DeleteGhost.canceled += instance.OnDeleteGhost;
            @ExitConstructionMode.started += instance.OnExitConstructionMode;
            @ExitConstructionMode.performed += instance.OnExitConstructionMode;
            @ExitConstructionMode.canceled += instance.OnExitConstructionMode;
        }

        private void UnregisterCallbacks(IConstructionControlsActions instance)
        {
            @RotateGhost.started -= instance.OnRotateGhost;
            @RotateGhost.performed -= instance.OnRotateGhost;
            @RotateGhost.canceled -= instance.OnRotateGhost;
            @PlaceGhost.started -= instance.OnPlaceGhost;
            @PlaceGhost.performed -= instance.OnPlaceGhost;
            @PlaceGhost.canceled -= instance.OnPlaceGhost;
            @DeleteGhost.started -= instance.OnDeleteGhost;
            @DeleteGhost.performed -= instance.OnDeleteGhost;
            @DeleteGhost.canceled -= instance.OnDeleteGhost;
            @ExitConstructionMode.started -= instance.OnExitConstructionMode;
            @ExitConstructionMode.performed -= instance.OnExitConstructionMode;
            @ExitConstructionMode.canceled -= instance.OnExitConstructionMode;
        }

        public void RemoveCallbacks(IConstructionControlsActions instance)
        {
            if (m_Wrapper.m_ConstructionControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IConstructionControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ConstructionControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ConstructionControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ConstructionControlsActions @ConstructionControls => new ConstructionControlsActions(this);

    // Camera Controls
    private readonly InputActionMap m_CameraControls;
    private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
    private readonly InputAction m_CameraControls_Move;
    private readonly InputAction m_CameraControls_Zoom;
    public struct CameraControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CameraControls_Move;
        public InputAction @Zoom => m_Wrapper.m_CameraControls_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(ICameraControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);

    // UI Controls
    private readonly InputActionMap m_UIControls;
    private List<IUIControlsActions> m_UIControlsActionsCallbackInterfaces = new List<IUIControlsActions>();
    private readonly InputAction m_UIControls_Click;
    private readonly InputAction m_UIControls_Point;
    public struct UIControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UIControls_Click;
        public InputAction @Point => m_Wrapper.m_UIControls_Point;
        public InputActionMap Get() { return m_Wrapper.m_UIControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
        public void AddCallbacks(IUIControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
        }

        private void UnregisterCallbacks(IUIControlsActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
        }

        public void RemoveCallbacks(IUIControlsActions instance)
        {
            if (m_Wrapper.m_UIControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIControlsActions @UIControls => new UIControlsActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    public interface IDefaultControlsActions
    {
        void OnPickStructure(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IConstructionControlsActions
    {
        void OnRotateGhost(InputAction.CallbackContext context);
        void OnPlaceGhost(InputAction.CallbackContext context);
        void OnDeleteGhost(InputAction.CallbackContext context);
        void OnExitConstructionMode(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IUIControlsActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
    }
}
